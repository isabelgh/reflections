What happens when you initialize a repository? Why do you need to do it?
	Before you initialize, the repository does not have any version control in it, and old versions will not be saved when you save and save again. It is just a folder with files. After you initialize it, git will know this is a git-repository and it will handle the version control for you. Thank's git! :-)

How is the staging area different from the working directory and the repository? What value do you think it offers?
	If I put my files in the staging area they are sort of ready to be published, there is something logically different with this file compared to previous version. In the staging area, git is aware of the files compared to when they just lie in the working directory as any file. I don't really know the value.

How can you use the staging area to make sure you have one commit per logical change?
	If I am finnished with a logical change, I can move multiple files that include the change to the staging area. I can then compare the staging area to the repository to make sure that I only commit the changes I intended to move. Otherwise I would have to move individual files wiht the same commit message. The staging area also helps if I need to take breaks and want to store a state without remembering what I changed. 

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	Branches are especially helpful when I want to work on something that's a new idea for the same problem or if I want to refactor the code in a bigger way. If I fail, I can easily discard the changes without having to remember all commits I did. If I succed there would be only one commit to merge it back to the master branch. It is a safety net for bigger changes. 

How do the diagrams help you visualize the branch structure?
	Visualizing is always helpful for understanding something. The diagrams show something that looks like a timeline, so you know what changes are made where. And if something is missing you will notice it easier if you have a graph of the branch strucutre.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	The result of merging two branches is one branch containing all commits of both branches. In the diagram you can see a sort of timeline when the commits were done and on which branch you were when you made them. It is easier to track what was done for what purpose. 

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?