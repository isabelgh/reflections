When would you want to use a remote repository rather than keeping all your 
work local?
	First of all, keeping work locally is a risk of loosing it, so a remote 
	repository is always a good idea to have as backup. Also, when you 
	collaborate with others it is a lot easier to have a single place remote 
	to store things rather than sending files back and forth.

Why might you want to always pull changes manually rather than having Git 
automatically stay up-to-date with your remote repository?
	I want to be in control of what base I have for the stuff I am working 
	on. The local changes might not be done and perhaps in conflict with the 
	remote repository. It might also take some time to sync the files, so if
	it would happen automatically for all changes made it would be difficult 
	to work at the same time. 

Describe the differences between forks, clones, and branches. When would you 
use one instead of another?
	- Fork: A fork is a copy of a github repository. The copy also resides in 
	github. You use a fork when you want to make changes to the files in the 
	repository but you want to keep the original intact. The benefits is that 
	the original writer also gets cred for the files you have copied. 
	- Clone: When you copy a git hub repository to your local computer, that 
	copy is a clone. Use a clone when you can/want to edit the files in the 
	repository and perhaps share it with specific persons to work togehter.The
	original does not stay the same as with a fork. 
	- Branch: A branch is used when you want to work on something that you want 
	to keep local. Like for instance, you have cloned master and you want to 
	run something a bit more experimental on the side that you don't 
	necessarily want to share with others (just yet anyways). In this case it 
	is easy to make a branch until you feel like sharing the new feature. 

What is the benefit of having a copy of the last known state of the remote 
stored locally?
	If you collaborate, more people will make changes to the same repository. 
	If you use fetch, you could see what the other's have changed without you
	having to take it into consideration while you work on your changes. That
	way, resolving merge conflicts are easier. And you can resolve those when
	you are ready to do so.

How would you collaborate without using Git or GitHub? What would be easier, 
and what would be harder?
	Without Git as version handler it would be more difficult to work on the 
	same project at the same time. We would have to plan carefully who get's 
	to change what before merging files every day and we would have to do more
	testing manually since GitHub wouldn't be there to spot conflicts. All of 
	that would be harder. But, if you sit next to the other person, it would be 
	easier to ask for a review by just looking at the other's person's screen
	not having to do pull requests. But in the end, it would be a lot harder
	to track all the changes and go back if something goes wrong. 

When would you want to make changes in a separate branch rather than directly 
in master? What benefits does each approach have?
	I would choose to make changes is a spearate branch either when 
	collaborating with others on the same project or if the team was really
	small but geographicly distributed. The benefit is that others will 
	naturally have to review my code and the chances for an overall higher 
	quality are better. 
	I would choose to make changes directly in master if I was working alone.
	The benefit of this approach is to save time an hassling with the pull 
	requests.  
